#!/bin/bash

COMMAND=$(basename $0)

## Sourcing functions from this directory
MADFOX_LIB_DIR=~/var/develop/MadMask/MadFoxd/lib
[ ! -e $MADFOX_LIB_DIR ] && MADFOX_LIB_DIR=/usr/share/madfoxd/lib

## Some parameters before starting firefox and opening its tabs
WAIT_FIREFOX_BOOT=10
WAIT_FIREFOX_OPEN_TAB=0.5
WAIT_FIREFOX_COMMAND=10

## Wait maximum 60 x WAIT_CLOUD_BOOT sec (= until firefox starts)
WAIT_CLOUD_BOOT=20

## Common config by a JSON file
CONFIG_JSON=""

## Input WEB pages by a JSON file
URL_JSON=""

# Firefox profile
FIREFOX_PROFILE=""

# Outputs for image importer
CONFIG_DATA_DIR=""
DATA_HOME="data/$USER"

## X-Window options
X_RESOLUTION=1280x1024
X_COLOR_DEPTH=24

## For process management
PIDDIR="/tmp/madfox.$USER"
LOGDIR="/tmp/madfox.$USER"


#-------------------------------
# External functions
#-------------------------------
[ -e $MADFOX_LIB_DIR ] && for func in $(ls $MADFOX_LIB_DIR/*.sh); do source $func; done


## Default display and its resolution
[[ "$DISPLAY" =~ ^:0 ]] && X_RESOLUTION=$(xwininfo -root -display :0.0 | grep 'geometry' | perl -pe "s/.*geometry (.*?)\+.*$/\1/g")


usage="$0 [options] -a [action]
 * Log level
 -L {TRACE|DEBUG|INFO|WARN|ERROR}

 * Process management
 -p:  set piddir [default: $PIDDIR]
 -l:  set logdir [default: $LOGDIR]

 * X-Display
 -x:  X-window display [default: $DISPLAY]
 -r:  X-window resolution [default: $X_RESOLUTION]

 * Firefox
 -f:  Set Firefox profile
 -w:  Set a wait time to boot Firefox [default: $WAIT_FIREFOX_BOOT]
 -t:  Set a wait time to open each tab [default: $WAIT_FIREFOX_OPEN_TAB]
 -C:  Set a wait time before running a defined command of URL JSON file [defaut: $WAIT_FIREFOX_COMMAND]

 * Common config file
 -c:  Config JSON file (typically, config.json)

 * URLs (as input sources)
 -u:  URL JSON file (typically, monitoring-urls.json)

 * Outputs (with 'import' action)
 -o:  data home [default: $DATA_HOME] 
   Dirs (capture/thumbnail/index) will be created under 'data home' / 'data_dir of config.json'. 
   The 'index' dir contains JSON/HTML outputs


 * Run an action
 -a:  Set action [start|stop|restart|killall|status|reload|capture|import]


 Report Bugs to Gen Kawamura <gen.kawamura@cern.ch>"


if [ $# -eq 0 ]; then
    echo "$usage"
    exit 0
fi


#--------------------------
# Getopt
#--------------------------
while getopts "S:L:c:u:o:x:r:f:a:w:t:C:p:l:hv" op
  do
  case $op in
      S) MADFOX_LIB_DIR=$OPTARG
	  for func in $(ls $MADFOX_LIB_DIR/*.sh); do source $func; done
          ;;
      L) set_loglevel $OPTARG
	  ;;
      c) CONFIG_JSON=$OPTARG	  
	  ;;
      u) URL_JSON=$OPTARG
	  ;;
      o) DATA_HOME=$OPTARG
	  ;;
      x) export DISPLAY="$OPTARG"
	  ;;
      r) X_RESOLUTION="$OPTARG"
	  ;;
      f) FIREFOX_PROFILE="$OPTARG"
	  ;;
      a) ACTION=$OPTARG
	 ;;
      w) WAIT_FIREFOX_BOOT=$OPTARG
	  ;;
      t) WAIT_FIREFOX_OPEN_TAB=$OPTARG
	  ;;
      C) WAIT_FIREFOX_COMMAND=$OPTARG
	  ;;
      p) PIDDIR=$OPTARG
	  ;;
      l) LOGDIR=$OPTARG
	  ;;
      h) echo "$usage"
	  exit 0
	  ;;
      v) echo "$version"
	  exit 0
	  ;;
      ?) echo "$usage"
	  exit 0
	  ;;
  esac
done


#-------------------------------
# Image importer (for debug)
#-------------------------------
debug_capture_xwin_display(){
    local output=$PIDDIR/xwindow.${X_DISPLAY}__${X_RESOLUTION}.jpg
    INFO "Importing X-Display --> [$output]"
    import -window root -silent $output &
}


#-------------------------------
# Firefox boot loader
#-------------------------------
set_new_firefox_profile(){
    local new_profile=$PIDDIR/$(basename $FIREFOX_PROFILE).${X_DISPLAY}__${X_RESOLUTION}
    FIREFOX_PROFILE=$new_profile
    INFO "Firefox profile of X-Window [$X_DISPLAY - $X_RESOLUTION] is [$FIREFOX_PROFILE]"
}

copy_firefox_profile(){
    local new_profile=$PIDDIR/$(basename $FIREFOX_PROFILE).${X_DISPLAY}__${X_RESOLUTION}
    INFO "Copying [$FIREFOX_PROFILE/] --> [$new_profile]"
    rsync -alogp --delete $FIREFOX_PROFILE/ $new_profile
    FIREFOX_PROFILE=$new_profile
    return 0
}


start_firefox(){
    local url=$1
    local command_option="--profile $FIREFOX_PROFILE $url"
    firefox $command_option &> $LOGDIR/firefox__$(basename ${FIREFOX_PROFILE}).log &
    #[ $? -ne 0 ] && return 1
    echo "$!"
    return 0
}


open_firefox_tabs(){
    ## Loading a JSON file defining URLs
    load_monitoringUrls_json $URL_JSON

    local profile_option=""
    [ ! -z "$FIREFOX_PROFILE" ] && profile_option="--profile $FIREFOX_PROFILE"

    local i
    local num_tabs=$((${#URLS[*]} - 1))
    INFO "Opening [$num_tabs] tabs ..."
    for i in $(seq 0 $num_tabs)
    do
	## Do we need to open a tab? (file_prefix = null => not capture, default/no_value = true)
	if [ -z "${FILE_PREFIXES[$i]}" ] || [ "${FILE_PREFIXES[$i]}" == "null" ]; then
	    INFO "Skipping [${FILE_PREFIXES[$i]}]" && continue
	fi

	## Open a tab
	local command_option="$profile_option -new-tab ${URLS[$i]}"
	INFO "FIREFOX TAB = [firefox $command_option]"
	firefox $command_option &> /dev/null &
	[ $? -ne 0 ] && ERROR "Opening Firefox Tabs failed" && return 1
	sleep $WAIT_FIREFOX_OPEN_TAB

	## Run 'firefox_command' 
	local fcommand="${FIREFOX_COMMANDS[$i]}"
	if [ ! -z "$fcommand" ] && [ "$fcommand" != "null" ]; then
	    INFO "Pushing [$fcommand] for Firefox (waiting [$WAIT_FIREFOX_COMMAND] sec)"
	    sleep $WAIT_FIREFOX_COMMAND
	    send_firefox_command "$fcommand"
	fi

	## For Trace
	[ $LOGLEVEL -ge $TRACE_LEVEL ] && INFO "TRACE mode. Exiting." && break
    done
    return 0
}



#-------------------------------
# Main actions
#-------------------------------
start_browser(){
    check_lock firefox && ERROR "Already running" && return 1

    ## Copying Firefox profile
    copy_firefox_profile

    ## Waiting ...
    INFO "Waiting [$WAIT_FIREFOX_BOOT] Sec (Before start_firefox) ..."
    sleep $WAIT_FIREFOX_BOOT

    ## Starting Firefox
    local pid=$(start_firefox "https://www.google.com")
    write_lock firefox $pid
    ! check_lock firefox && ERROR "Starting firefox failed" && remove_lock firefox && return 1

    ## Waiting ...
    INFO "Waiting [$WAIT_FIREFOX_BOOT] Sec (After start_firefox) ..."
    sleep $WAIT_FIREFOX_BOOT

    ## Fitting Window (for Xvfb screen)
    fit_window "firefox" $X_RESOLUTION
    debug_capture_xwin_display

    ## A loop over opening Firefox tabs
    open_firefox_tabs
    debug_capture_xwin_display

    return 0
}


stop_browser(){
    ! check_lock firefox && ERROR "Firefox already stopped" && return 1
    remove_lock firefox
    local ret=$?
    really_kill firefox
    return $ret
}


status_browser(){
    ! check_lock firefox && return 1
    return 0
}


reload_browser(){
    INFO "Reloading browser pages ..."
    run_madfox_addon "reload"
    return 0
}


capture_browser(){
    INFO "Capturing browser views to [$(get_madfox_addon_outdir)/] ..."
    run_madfox_addon "capture"
    debug_capture_xwin_display
    return 0
}


last_captured(){
    ## Show latest time when images were captured
    INFO "Firefox profile of running process = $FIREFOX_PROFILE]"
    local madfox_out=$(get_madfox_addon_outdir)
    ! ls $madfox_out/* &> /dev/null && INFO "[$madfox_out] does not exist" && return 1
    INFO "Checking [$madfox_out]"
    INFO "Last captured: [$(stat -c %y $(ls -t $madfox_out/* | head -n 1))], Num. Files: $(ls -t $madfox_out/* | wc -l)"
    return 0
}


import_images(){
    local data_dir=$1

    ## Import dirs
    local capture_dir=$data_dir/capture
    local thumbnail_dir=$data_dir/thumbnail
    local index_dir=$data_dir/index

    INFO "CAPTURE_DIR      = [$capture_dir]"
    INFO "THUMBNAIL_DIR    = [$thumbnail_dir]"
    INFO "INDEX_DIR        = [$index_dir]"

    ## Loading a JSON file defining URLs
    load_monitoringUrls_json $URL_JSON

    ## Set date ID
    date_id=$(date +%Y%m%d-%H%M)
    [ -e $capture_dir/$date_id ] && ERROR "Capture dir [$capture_dir/$date_id] already exists!" && return 1

    #-----------------------------------
    # Import captured images
    #-----------------------------------
    [ ! -e $capture_dir/$date_id ] && mkdir -pv $capture_dir/$date_id
    import_madfox_images $(get_madfox_addon_outdir) $capture_dir/$date_id

    #-----------------------------------
    # Make thumbnails
    #-----------------------------------
    [ ! -e $thumbnail_dir/$date_id ] && mkdir -pv $thumbnail_dir/$date_id
    generate_thumbnails $capture_dir/$date_id $thumbnail_dir/$date_id

    #-----------------------------------
    # Write JSON/HTML output
    #-----------------------------------
    [ ! -e $index_dir/$date_id ] && mkdir -pv $index_dir/$date_id
    write_index_json $data_dir $date_id
    write_index_html $data_dir $date_id
}




#-------------------------------
# Trapping kill signals
#-------------------------------
clean_madfox(){
    stop_browser
    stop_virutal_xwin    
}



#====================================================
#
# Main
#
#====================================================
## If common config is set, the priority is high
if [ ! -z "$CONFIG_JSON" ]; then
    [ ! -e "$CONFIG_JSON" ] && ERROR "Common config [$CONFIG_JSON] does not exist" && exit -1
    read_common_config $CONFIG_JSON
    [ -z "$FIREFOX_PROFILE" ] && FIREFOX_PROFILE="$CONFIG_FIREFOX_PROFILE"
fi


## Check variables
[ -z "$URL_JSON" ] && ERROR "urlfile is empty!" && exit -1
[ ! -e "$URL_JSON" ] && ERROR "urlfile [$URL_JSON] does not exist" && exit -1
[ -z "$FIREFOX_PROFILE" ] && ERROR "FIREFOX_PROFILE [$FIREFOX_PROFILE] is not given" && exit -1
[ ! -e $FIREFOX_PROFILE ] && ERROR "FIREFOX_PROFILE [$FIREFOX_PROFILE] does not exist" && return 1
[ ! -d $FIREFOX_PROFILE ] && ERROR "FIREFOX_PROFILE [$FIREFOX_PROFILE] is not a directory" && return 1
[ -z "$DISPLAY" ] && ERROR "DISPLAY is empty" && exit -1
[[ ! "$DISPLAY" =~ ^: ]] && ERROR "DISPLAY does not have a proper format" && exit -1
[ -z "$X_RESOLUTION" ] && ERROR "X_RESOLUTION is empty" && exit -1
[ -z "$PIDDIR" ] && ERROR "PIDDIR is empty" && exit -1
[ ! -d $PIDDIR ] && ! mkdir -pv $PIDDIR && ERROR "Cannot create [$PIDDIR]" && exit -1
[ -z "$LOGDIR" ] && ERROR "LOGDIR is empty" && exit -1
[ ! -d $LOGDIR ] && ! mkdir -pv $LOGDIR && ERROR "Cannot create [$LOGDIR]" && exit -1
[ ! -z "$DATA_HOME" ] && [ ! -e "$DATA_HOME" ] && ERROR "DATA_HOME [$DATA_HOME] does not exist" && exit -1


## Show main input variables
INFO "DISPLAY          = [$DISPLAY]"
INFO "CONFIG_JSON      = [$CONFIG_JSON]"
INFO "URL_JSON         = [$URL_JSON]"
INFO "FIREFOX_PROFILE  = [$FIREFOX_PROFILE]"
INFO "PIDDIR           = [$PIDDIR]"
INFO "LOGDIR           = [$LOGDIR]"
INFO "DATA_HOME        = [$DATA_HOME]"


## For X-Window
X_DISPLAY=$(echo $DISPLAY | perl -pe "s/://g")


#-----------------------------------
# Run main actions over X-wins
#-----------------------------------
case $ACTION in
    start)
	trap clean_madfox SIGINT SIGTERM SIGKILL SIGHUP
	start_virutal_xwin || exit -1
	start_browser
	;;
    stop)
	stop_browser
	stop_virutal_xwin
	;;
    restart)
	stop_browser
	stop_virutal_xwin
	trap clean_madfox SIGINT SIGTERM SIGKILL SIGHUP
	start_virutal_xwin || exit -1
	start_browser
	;;
    status)
	set_new_firefox_profile
	status_browser
	last_captured
	;;
    killall)
	remove_all_locks
	;;
    reload)
	set_new_firefox_profile
	reload_browser
	;;
    capture)
	set_new_firefox_profile
	capture_browser
	;;
    import)
	INFO "DATA_HOME = [$DATA_HOME]"
	[ -z "$DATA_HOME" ] && ERROR "DATA_HOME is empty" && exit -1
	DATA_DIR=$DATA_HOME
	[ ! -z "$CONFIG_DATA_DIR" ] && DATA_DIR=$DATA_HOME/$CONFIG_DATA_DIR
	[ ! -e "$DATA_DIR" ] && ERROR "DATA_DIR [$DATA_DIR] does not exist" && exit -1

	set_new_firefox_profile
	import_images $DATA_DIR
	;;
    *)
	ERROR "Action [$ACTION] does not exist"
	exit -1
	;;
esac
	
