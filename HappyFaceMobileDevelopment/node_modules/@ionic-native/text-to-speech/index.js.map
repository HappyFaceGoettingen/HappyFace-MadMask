{"version":3,"sources":["../../../src/@ionic-native/plugins/text-to-speech/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAWxE;;;;;;;;;;;;;;;;;;;;GAoBG;AASH;IAAkC,gCAAiB;IAAnD;;IA8BA,CAAC;IA5BC;;;;OAIG;IAKH,4BAAK,GAAL,UAAM,aAAkC;QACtC,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,2BAAI,GAAJ;QACE,MAAM,CAAC;IACT,CAAC;IAEI,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,2BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAlBA;QAJC,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;6CAGD;IAOD;QADC,OAAO,EAAE;;;;4CAGT;IAtBU,YAAY;QARxB,MAAM,CAAC;YACN,UAAU,EAAE,gBAAgB;YAC5B,MAAM,EAAE,oBAAoB;YAC5B,SAAS,EAAE,KAAK;YAChB,IAAI,EAAE,6CAA6C;YACnD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,iBAAiB,CAAC;SACjD,CAAC;OAEW,YAAY,CA8BxB;IAAD,mBAAC;CA9BD,AA8BC,CA9BiC,iBAAiB,GA8BlD;SA9BY,YAAY","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface TTSOptions {\n  /** text to speak */\n  text: string;\n  /** a string like 'en-US', 'zh-CN', etc */\n  locale?: string;\n  /** speed rate, 0 ~ 1 */\n  rate?: number;\n}\n\n/**\n * @name Text To Speech\n * @description\n * Text to Speech plugin\n *\n * @usage\n * ```typescript\n * import { TextToSpeech } from '@ionic-native/text-to-speech';\n *\n * constructor(private tts: TextToSpeech) { }\n *\n * ...\n *\n * this.tts.speak('Hello World')\n *   .then(() => console.log('Success'))\n *   .catch((reason: any) => console.log(reason));\n *\n * ```\n * @interfaces\n * TTSOptions\n */\n@Plugin({\n  pluginName: 'Text To Speech',\n  plugin: 'cordova-plugin-tts',\n  pluginRef: 'TTS',\n  repo: 'https://github.com/vilic/cordova-plugin-tts',\n  platforms: ['Android', 'iOS', 'Windows Phone 8']\n})\n\nexport class TextToSpeech extends IonicNativePlugin {\n\n  /**\n   * This function speaks\n   * @param textOrOptions {string | TTSOptions} Text to speak or TTSOptions\n   * @return {Promise<any>} Returns a promise that resolves when the speaking finishes\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  speak(textOrOptions: string | TTSOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Stop any current TTS playback\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  stop(): Promise<any> {\n    return;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}