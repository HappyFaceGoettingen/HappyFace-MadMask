// Arquivo exemplo de configuração.

var REGEX_WORD = /[a-zA-Zà-úÀ-Ú\-]{2,}/ig;

module.exports = {
    // Diretorios que serao validados.
    dirs: [
        //'/dados/Workspace/Java/erp'//,
        //'/dados/Workspace/Java/portal',
        //'/dados/Workspace/Java/sac',
        //'/dados/Workspace/Java/administrativo'
    ],
    
    // Dicionario de palavras.
    dictionary: __dirname + '/dictionary.json',

    // Validadores por extensao dos arquivos.
    parsers: { 
        'php': function(content) {
            var regex = /(?:BusinessException\s*\(\s*)(".*?")(\))/gi,
                ret   = [],
                matches;                        
            
            while ((matches = regex.exec(content)) !== null) {
                matches[1].match(/\[?\s*"(.*?)"\s*\]?/g).forEach(function(token) {
                    //console.log(token);
                    
                    if (!token || token.indexOf(']') != -1) {
                        return;
                    }
                    
                    var tokens = token.match(REGEX_WORD);
            
                    if (tokens) {
                        ret = ret.concat(tokens);
                    }
                });
            }
            
            //process.exit(1);

            return ret;
        },
        
        'phtml': function(content) {
            // Conteudo dentro das tags <..> TEXTO </..>
            var regex = /<([\w]+)[^>]*>([^<^&.]*?)<\/\1>/ig,
                ret   = [],
                matches;                        
            
            while ((matches = regex.exec(content)) !== null) {
                var tokens = matches[2].match(REGEX_WORD);
                
                if (tokens) {
                    ret = ret.concat(tokens);  
                }
            }        
            
            // Conteudo dentro dos data-desc
            regex = /(.*)?data-desc\s*=\s*"(.*?)"/ig
            
            while ((matches = regex.exec(content)) !== null) {
                //console.log(matches[0], '|', matches[1], '|', matches[2],'|', matches[3]);
                if (matches[1].indexOf('sbx-searchfield') != -1) {
                    continue;
                }
                
                var tokens = matches[2].match(REGEX_WORD);
                
                if (tokens) {
                    ret = ret.concat(tokens);  
                }
            }
            
            return ret;
        },
        
        'js': function(content) {
             var regex = /Utils\.(warn|info|error)?\s*\(\s*(["'])(.*?)\2/ig,
                ret   = [],
                matches;                        
            
            while ((matches = regex.exec(content)) !== null) {
                var tokens = matches[3].match(REGEX_WORD);
                
                if (tokens) {
                    ret = ret.concat(tokens);  
                }              
            }

            return ret;
        }
    }
};
